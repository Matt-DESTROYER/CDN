function GET(e){return new Promise((t,a)=>{const n=new XMLHttpRequest;n.open("GET",e,!0),n.send(null),n.onreadystatechange=(()=>{if(4===n.readyState&&200===n.status){1!==n.getResponseHeader("Content-Type").indexOf("text")&&t(n.responseText)}else 4===n.readyState&&t(n)})})}function Page(e,t,a,n){this.title=e,this.htmlDirectory=t,this.htmlPartialLoaded=!1,GET(this.htmlDirectory).then(e=>{this.htmlPartial=e,this.htmlPartialLoaded=!0,n.$progress()}),this.jsControllerDirectory=a,this.jsControllerLoaded=!1,GET(this.jsControllerDirectory).then(e=>{this.jsController=e,this.jsControllerLoaded=!0,n.$progress()})}class DOMLibInstance{constructor(e){this.$appName=e,this.$pages=[],this.$pageContentLoaded=0,this.Page="",this.onload=(()=>{});let t=document.getElementsByTagName("title");if(t.length>0)t[0].innerHTML=this.$appName;else{const e=document.createElement("title");e.textContent=this.$appName,document.getElementsByTagName("head")[0].append(e)}}$progress(){this.$pageContentLoaded++,this.$pageContentLoaded===2*this.$pages.length&&this.onload()}GetPage(e){for(let t=0;t<this.$pages.length;t++)if(this.$pages[t].title===e)return this.$pages[t];return null}CreatePage(e,t,a){return this.$pages.push(new Page(e,t,a,this))}RefreshAllContent(){this.$pageContentLoaded=0,this.$pages.forEach(function(e){return new Page(e.title,e.htmlDirectory,e.jsControllerDirectory,this)})}Render(e){if(e||!this.Page){if(!(this.$pages.length>0))throw new Error("["+this.$appName+"] No pages created, create at least one page before rendering the page.");this.Page=this.GetPage(e).title||this.$pages[0].title}const t=this.GetPage(this.Page);if(!t.htmlPartialLoaded||!t.jsControllerLoaded)throw new Error("["+this.$appName+"] Page cannot be rendered, content not yet loaded. (Use "+this.$appName+".onload to ensure page contents are not used before loaded.)");document.getElementsByTagName("body")[0].innerHTML=t.htmlPartial+"\n<script>"+t.jsController+"<\/script>"}}function DOMLibVariable(e,t){this.name=e,this.value=t}HTMLElement.prototype.event=HTMLElement.prototype.addEventListener;class DOMLibController{constructor(){this.Variables=[]}DOM(e){}CreateVariable(e,t){return this.Variables.push(new DOMLibVariable(e,t||void 0)).value}GetVariable(e){for(let t=0;t<this.Variables.length;t++)if(this.Variables[t].name===e)return this.Variables[t].value;return null}SetVariable(e,t){for(let a=0;a<this.Variables.length;a++)if(this.Variables[a].name===e)return this.Variables[a].value=t,this.Variables[a].value;return null}}const DOMLib={Init:function(e){return new DOMLibInstance(e)},Controller:function(){return new DOMLibController}};
