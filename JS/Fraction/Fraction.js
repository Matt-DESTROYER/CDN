const Fraction=function(a,b){if("number"==typeof a&&"number"==typeof b){if(a!== ~~a||b!== ~~b)throw new TypeError("[Fraction] Fractions can only be made up of whole numbers.");this.numerator=a,this.denominator=b}else throw new TypeError("[Fraction] Expected input to be of type 'number'.")};Fraction.prototype.simplify=function(){for(let a=Math.min(this.numerator,this.denominator);a>1;a--)if(this.numerator%a==0&&this.denominator%a==0){this.numerator/=a,this.denominator/=a;break}return this},Fraction.prototype.add=function(a,b){if(a instanceof Fraction)return this.denominator!==a.denominator?(this.numerator=this.numerator*a.denominator+a.numerator*this.denominator,this.denominator*=a.denominator):this.numerator=this.numerator+a.numerator,this;if(b&&"number"==typeof a&&"number"==typeof b){if(a!== ~~a||b!== ~~b)throw new TypeError("[Fraction.prototype.add] Fractions can only be made up of whole numbers.");return this.denominator!==b?(this.numerator=this.numerator*b+a*this.denominator,this.denominator*=b):this.numerator=this.numerator+a,this}throw new Error("[Fraction.prototype.add] Invalid input.")},Fraction.prototype.subtract=function(a,b){if(a instanceof Fraction)return this.denominator!==a.denominator?(this.numerator=this.numerator*a.denominator-a.numerator*this.denominator,this.denominator*=a.denominator):this.numerator=this.numerator-a.numerator,this;if(b&&"number"==typeof a&&"number"==typeof b){if(a!== ~~a||b!== ~~b)throw new TypeError("[Fraction.prototype.subtract] Fractions can only be made up of whole numbers.");return this.denominator!==b?(this.numerator=this.numerator*b-a*this.denominator,this.denominator*=b):this.numerator=this.numerator-a,this}throw new Error("[Fraction.prototype.subtract] Invalid input.")},Fraction.prototype.multiply=function(a,b){if(a instanceof Fraction)return this.numerator*=a.numerator,this.denominator*=a.denominator,this;if(b&&"number"==typeof a&&"number"==typeof b){if(a!== ~~a||b!== ~~b)throw new TypeError("[Fraction.prototype.multiply] Fractions can only be made up of whole numbers.");return this.numerator*=a,this.denominator*=b,this}throw new Error("[Fraction.prototype.multiply] Invalid input.")},Fraction.prototype.divide=function(a,b){if(a instanceof Fraction)return this.numerator*=a.denominator,this.denominator*=a.numerator,this;if(b&&"number"==typeof a&&"number"==typeof b){if(a!== ~~a||b!== ~~b)throw new TypeError("[Fraction.prototype.divide] Fractions can only be made up of whole numbers.");return this.numerator*=b,this.denominator*=a,this}throw new Error("[Fraction.prototype.divide] Invalid input.")},Fraction.prototype.pow=function(a){return this.numerator=this.numerator**a,this.denominator=this.denominator**a,this},Fraction.prototype.sqrt=function(){return this.numerator=Math.sqrt(this.numerator),this.denominator=Math.sqrt(this.denominator),this},Fraction.prototype.toArray=function(){return[this.numerator,this.denominator]},Fraction.prototype.toString=function(){return this.numerator+"/"+this.denominator},console.log("Loaded Fraction.js by Matthew James!")
