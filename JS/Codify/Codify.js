const operatorRegEx=/([0-9a-zA-Z_$]| |&nbsp;)(\+|-|\*|\/|&equals;|&&|&|\|\||\|)([0-9a-zA-Z_$]| |&nbsp;)/g,variableCharacterRegEx=/([0-9a-zA-Z_$]| |&nbsp;)/,variableCharacterGRegEx=/([0-9a-zA-Z_$]| |&nbsp;)/g,keywordRegEx=/([0-9a-zA-Z_$]| |&nbsp;)(synchronized|constructor|implements|instanceof|arguments|interface|protected|transient|abstract|continue|debugger|function|volatile|boolean|default|extends|finally|package|private|delete|double|export|import|native|public|return|static|switch|throws|typeof|await|break|catch|class|const|false|final|float|short|super|throw|while|yield|byte|case|char|else|enum|eval|goto|long|null|this|true|void|with|for|int|let|new|try|var|do|if|in)([0-9a-zA-Z_$]| |&nbsp;)/g,variableRegEx=/(var|let|const|function|class) +[a-zA-Z_\$][a-zA-Z0-9_$]*/g,numberRegEx=/([0-9]+)?\.?[0-9]+/g,stringRegEx=/(".*?"|'.*?')/g,tildaString=/(`.*?\$\{|\}.*?`|`.*?`)/gs,commentRegEx=/(\/\/.*?$|\/\*.*?\*\/)/gms,keywords=["synchronized","constructor","implements","instanceof","arguments","interface","protected","transient","abstract","continue","debugger","function","volatile","boolean","default","extends","finally","package","private","delete","double","export","import","native","public","return","static","switch","throws","typeof","await","break","catch","class","const","false","final","float","short","super","throw","while","yield","byte","case","char","else","enum","eval","goto","long","null","this","true","void","with","for","int","let","new","try","var","do","if","in"];function codifyJS(e){let t;return(t=(e=e.replace(/&nbsp;/g," ").replace(/</g,"<operator>&lt;</operator>").replace(/>/g,"<operator>&gt;</operator>").replace(/=/g,"<operator>&equals;</operator>")).match(operatorRegEx))&&t.forEach(t=>{const r=t.split(/\+|-|\*|\/|&equals;|&&|&|\|\||\|/)[0],a=t.split(/\+|-|\*|\/|&equals;|&&|&|\|\||\|/)[1];t=t.replace(r,"").replace(a,""),e=e.replace(r+t+a,r+"<operator>"+t+"</operator>"+a)}),(t=e.match(variableRegEx))&&t.forEach(t=>{t=t.replace(/(var|let|const|function|class) +/g,""),e.match(new RegExp(".?"+t+".?","g")).forEach(r=>{if(r[0]!==t[0]&&!/(\s|;|\(|\)|\{|\}|\[|\])/g.test(r[0]))return;if(r[r.length-1]!==t[0]&&!/(\s|;|\(|\)|\{|\}|\[|\])/g.test(r[r.length-1]))return;const a=r[0],n=r[r.length-1];r=r.replace(a,"").replace(n,""),e.replace(a+r+n,a+"<variable>"+r+"</variable>"+n)})}),(t=e.match(keywordRegEx))&&t.forEach(t=>{console.log("Match: "+t);const r=t[0],a=t[t.length-1];t=t.replace(r,"").replace(a,""),keywords.includes(t)&&(console.log("Keyword: "+t,"Start char: '"+r+"'","End char: '"+a+"'"),e=e.replace(new RegExp(r+t+a,"g"),r+"<keyword>"+t+"</keyword>"+a))}),(t=e.match(numberRegEx))&&t.forEach(t=>{e=e.split(t).join("<number>"+t+"</number>")}),(t=e.match(stringRegEx))&&t.forEach(t=>{e=e.split(t).join("<string>"+t+"</string>")}),(t=e.match(tildaString))&&t.forEach(t=>{e=e.split(t).join("<string>"+t+"</string>")}),(t=e.match(commentRegEx))&&t.forEach(t=>{e=e.replace(t,"<comment>"+t+"</comment>")}),e.replace(/ /g,"&nbsp;")}function removeSpans(e){return e.replace(/<span.*?>.*?<\/span>/g,"")}function removeInnerHtml(e){return e.replace(/(<br>|<br \/>)/g,"\n").replace(/(<.*?>|<\/.*?)/g)}function cleanInner(e){return e=(e=(e=(e=(e=(e=(e=e.replace(/<span.*?>/g,"")).replace(/<\/span>/g,"")).replace(/<font.*?>/g,"")).replace(/<\/font>/g,"")).replace(/<div.*?>/g,"<br>")).replace(/<\/div>/g,"")).replace(/<br><br>/g,"<br>")}
